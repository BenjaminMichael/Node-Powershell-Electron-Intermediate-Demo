TOPIC
    PowerShell Access Control DSC Resources

SHORT DESCRIPTION
    Overview of the DSC resources found in the PowerShell Access Control module

LONG DESCRIPTION
    NOTE: As of version 3.0 of the PowerShell Access Control module, the DSC 
          resources are still very much in a testing phase. Be aware that 
          future versions of the module may behave differently and/or have 
          different resources and parameters. The documentation in future 
          versions should reflect any changes, though.

    The PowerShell Access Control module contains three Desired State 
    Configuration (DSC) resources: 
        1. cAccessControlEntry
        2. cSecurityDescriptor
        3. cSecurityDescriptorSddl
    
    All three resources are able to make modification to a securable object's 
    security descriptor (SD). They all share the following required parameters:
        - Path: A string describing the location of the securable object. 
          Combined with ObjectType, this parameter helps to uniquely identify 
          the securable object. The path syntax for each object type is listed 
          below.
        - ObjectType: A string describing the type of the securable object. For 
          now, the following types are supported: 
            
            o File         - The path points to a file object. The path should 
                             be in the same format as a path to Get-Item or 
                             Get-ChildItem, e.g., C:\Temp.

            o Directory    - The path points to a directory object. The path 
                             should be in the same format as a File object.

            o RegistryKey  - The path points to a registry key. The format 
                             should be in the same PS provider format as a 
                             registry path to Get-Item or Get-ChildItem, e.g., 
                             HKLM:\SOFTWARE.

            o Service      - The path points to a service. The format of the 
                             path is the service name, e.g., 'bits'.

            o WmiNamespace - The path points to a WMI namespace. The format 
                             of the path is the same as the -Namespace used in 
                             a call to Get-WmiObject or Get-CimInstance, e.g., 
                             'root/cimv2'.

    More information about each DSC resource can be found in the below 
    sections.


cAccessControlEntry
-------------------
This resource provides the ability to ensure specific access control entries (ACEs) are present or absent from a securable object. A few simple examples of what can be checked:
- Make sure that 'Users' have the ability to Stop and Stop the 'bits' service
- Make sure that 'Users' does not have the 'Delete' right over the 'C:\Temp' folder
- Make sure that 'Users' have a deny access ACE for the 'Delete' right over the 'C:\Temp' folder
- Make sure that 'Everyone' has all failed file accesses audited for the 'C:\Temp' folder

It has the following inputs (required inputs have an asterisk before their name):
- *Path: See the beginning of the help topic for more information.
- *ObjectType: See the beginning of the help topic for more information.
- *AceType: Describes the type of the ACE that is tested/set.
- *Principal: The trustee (user, group, computer, etc) that is listed in the ACE.
- Ensure: Describes whether or not ACE should be present. Valid values are 'Present' or 'Absent'. Default is 'Present'.
- AccessMask (required if -Ensure is set to 'Present'): Describes the rights that are granted/denied/audited. This must be an int or a value that can be cast to an int, e.g., [FileSystemRights]::Delete would work, but not simply 'Delete'. If no -AccessMask is present when -Ensure is set to 'Absent', then the object will have no access for the -Principal. If -Ensure is set to 'Present' (or not provided), then an error will be generated (-AccessMask is required in that scenario).
- AppliesTo: A string value that is used to control where the ACE will apply. This is only useful for container objects (folders, registry keys, WMI namespaces, etc). Any of the following strings can be used: Object, ChildContainers, ChildObjects. Multiple values can be used as long as they are comma separated. If this string isn't provided, a default value is used for each type, e.g., folders will have a default of all three values, registry keys of "Object, ChildContainers", etc.
- OnlyApplyToThisContainer: A boolean value that specifies whether the ACE will only apply to the container it belongs to. The default is 'False'.
- Specific (Only valid when -Ensure is set to 'Absent'): A boolean value that controls whether or not an ACE must match exactly in order to fail the test/be removed from the object. This controls whether or not the -Specific switch is sent to Remove-AccessControlEntry.

<More words here, and an example>


cSecurityDescriptor
-------------------


<example here>


cSecurityDescriptorSddl
-----------------------
This resource provides the same functionality as cSecurityDescriptor, but it only has three inputs (all are required): 
- *Path: See the beginning of the help topic for more information.
- *ObjectType: See the beginning of the help topic for more information.
- *Sddl: A string providing the parts of the SD to test/set.

The SDDL string can provide any number of the following sections: Owner, Group, Discretionary ACL, System ACL. The SDDL string will also control whether or not an ACL is set to inherit entries from the parent object. 

The get a valid SDDL string, you can use a security descriptor object from the PowerShell Access Control module (from Get-SecurityDescriptor or New-AdaptedSecurityDescriptor). After getting a security descriptor object, you can use the security descriptor modification functions to make it look the way you'd like, then use the [SD Object].SecurityDescriptor.GetSddlForm() method to get the parts of the SDDL you're interested in:

# Get security descriptor
PS> $SD = Get-SecurityDescriptor c:\windows -Audit

# If this is how you'd like the SD to look, then start calling the GetSddlForm()
# If not, make changes to the $SD object (you don't have the save them).

# Get full SDDL
PS> $SD.Sddl

# Get owner only
PS> $SD.SecurityDescriptor.GetSddlForm("Owner")

# Get Owner, DACL, and SACL
PS> $SD.SecurityDescriptor.GetSddlForm("Owner, Access, Audit")

# Get full SDDL (alternate)
PS> $SD.SecurityDescriptor.GetSddlForm("Owner, Group, Access, Audit")
# or
PS> $SD.SecurityDescriptor.GetSddlForm("All")

Like cSecurityDescriptor, the only parts of the target object's security descriptor that will be check/modified are the parts specified in the DSC node. So if you have an SDDL string that only contains an owner section, only the owner section of the target's SD will be tested/modified.

<example here>


SEE ALSO
    about_PowerShellAccessControl_DscResources
    Add-AccessControlEntry
    Disable-AclInheritance
    Enable-AclInheritance
    Get-AccessControlEntry
    Get-SecurityDescriptor
    New-AccessControlEntry
    Remove-AccessControlEntry
    Set-SecurityDescriptor
